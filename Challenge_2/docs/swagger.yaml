definitions:
  models.ErrorResponse:
    properties:
      message:
        type: string
    type: object
  models.Movie:
    properties:
      artists:
        items:
          type: string
        type: array
      description:
        type: string
      duration:
        type: integer
      genres:
        items:
          type: string
        type: array
      id:
        type: integer
      title:
        type: string
      video_url:
        type: string
    type: object
  models.PaginatedMoviesResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/models.Movie'
        type: array
      meta:
        properties:
          limit:
            type: integer
          page:
            type: integer
          total:
            type: integer
        type: object
    type: object
info:
  contact: {}
paths:
  /movies:
    get:
      consumes:
      - application/json
      description: 'Returns a paginated list of movies including associated artists
        and genres. Defaults: page = 1, limit = 10.'
      parameters:
      - description: Page number (default is 1)
        in: query
        name: page
        type: integer
      - description: Items per page (default is 10)
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.PaginatedMoviesResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Get paginated list of movies
      tags:
      - Movies
    post:
      consumes:
      - multipart/form-data
      description: Creates and uploads a new movie. Artists and genres that do not
        exist in the database will be created automatically before the movie is saved.
        The uploaded file must be in video format (.mp4, .mkv, .webm) and must not
        exceed 10MB in size. File will be uploaded in Challenge_2/store
      parameters:
      - description: Movie title
        in: formData
        name: title
        required: true
        type: string
      - description: Movie description
        in: formData
        name: description
        required: true
        type: string
      - description: Movie duration
        in: formData
        name: duration
        required: true
        type: integer
      - description: Comma-separated artist names
        in: formData
        name: artists
        required: true
        type: string
      - description: Comma-separated genre names
        in: formData
        name: genres
        required: true
        type: string
      - description: Video file
        in: formData
        name: video
        required: true
        type: file
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Movie'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Create a new movie
      tags:
      - Movies
  /movies/{id}:
    put:
      consumes:
      - multipart/form-data
      description: Updates an existing movie's details and optionally replaces the
        video file. Artists and genres that do not exist in the database will be created
        automatically before updating the movie. The uploaded file must be in video
        format (.mp4, .mkv, .webm) and must not exceed 10MB in size. File will be
        uploaded in Challenge_2/store
      parameters:
      - description: Movie ID
        in: path
        name: id
        required: true
        type: integer
      - description: Updated movie title
        in: formData
        name: title
        type: string
      - description: Updated movie description
        in: formData
        name: description
        type: string
      - description: Updated movie duration in minutes
        in: formData
        name: duration
        type: integer
      - description: Comma-separated updated artist names
        in: formData
        name: artists
        type: string
      - description: Comma-separated updated genre names
        in: formData
        name: genres
        type: string
      - description: New video file (optional)
        in: formData
        name: video
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Movie'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Update an existing movie
      tags:
      - Movies
  /movies/search:
    get:
      consumes:
      - application/json
      description: Searches for movies where the title, description, artist name,
        or genre name matches the given query string.
      parameters:
      - description: Search keyword (case-insensitive)
        in: query
        name: q
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Movie'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Search movies by title, description, artist, or genre
      tags:
      - Movies
swagger: "2.0"
